/// <reference lib="webworker" />
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import {clientsClaim} from 'workbox-core';

import {precacheAndRoute} from 'workbox-precaching';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
	if (event.data && 'type' in event.data && event.data.type === 'SKIP_WAITING') {
		event.waitUntil(self.skipWaiting());
	}
});

// Any other custom service worker logic can go here.

// listen push notification and show notification
self.addEventListener('push', (event) => {
	if (event.data) {
		const data = event.data.json();
		const options: NotificationOptions = {
			body: data.body,
			icon: data.icon,
			badge: data.badge,
		};
		console.log('push message:', data);
		event.waitUntil(self.registration.showNotification(data.title, options));
	}
});
